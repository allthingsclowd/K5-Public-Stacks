heat_template_version: 2013-05-23
# Author: Graham Land
# Date: 17/09/2016
# Purpose: K5 template to test uk-1b AZ

description: K5 template to test uk-1b AZ

# Input parameters
parameters:
  ubuntu1604:
    type: string
    label: Image name or ID
    description: Ubuntu 16.04.LTS image to be used for compute instance
    default: "Red Hat Enterprise Linux 7.2 64bit (English) 01"
  az:
    type: string
    label: Availability Zone
    description: Region AZ to use
    default: "uk-1b"
  default-sshkey:
    type: string
    label: ssh key injected into linux systems
    description: ssh key for linux builds
    default: "demostack"
   

# K5 Infrastructure resources to be built
resources:

  # Create a new private network
  ironio_net:
    type: OS::Neutron::Net
    properties:
      availability_zone: { get_param: az }
      name: "ironio_network"

  # Create a new subnet on the private network
  ironio_subnet:
    type: OS::Neutron::Subnet
    depends_on: ironio_net
    properties:
      availability_zone: { get_param: az }
      name: "ironio_subnet"
      network_id: { get_resource: ironio_net }
      cidr: "10.10.203.0/24"
      gateway_ip: "10.10.203.254"
      allocation_pools:
        - start: "10.10.203.200"
          end: "10.10.203.220"
      
  # Create a new router
  ironio_router:
    type: OS::Neutron::Router
    properties:
      availability_zone: { get_param: az }
      name: "ironio_router"

  # Connect an interface on the private network's subnet to the router
  ironio_router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: ironio_router
    properties:
      router_id: { get_resource: ironio_router }
      subnet_id: { get_resource: ironio_subnet }

  # Create a security group
  server_security_group1:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name: "JumpBox"
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp




  ################################ Adding a Server Start ##############################

  # Create a new port for the server interface, assign an ip address and security group    
  server1_port:
    type: OS::Neutron::Port
    depends_on: [ ironio_router,server_security_group1 ]
    properties:
      availability_zone: { get_param: az }
      network_id: { get_resource: ironio_net }
      security_groups: [{ get_resource: server_security_group1 }]
      fixed_ips:
        - subnet_id: { get_resource: ironio_subnet }
          ip_address: '10.10.203.1'

  # Create a data volume for use with the server
  data_vol_server1:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      description: Data volume
      name: "data-vol"
      size: 140
      volume_type: "M1"

  # Create a system volume for use with the server
  sys-vol_server1:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      name: "boot-vol"
      size: 40
      volume_type: "M1"
      image : { get_param: ubuntu1604 }

  # Build a server using the system volume defined above
  server1:
    type: OS::Nova::Server
    depends_on: [ server1_port ]
    properties:
      key_name: { get_param: default-sshkey }
      image: { get_param: ubuntu1604 }
      flavor: "S-1"
      block_device_mapping: [{"volume_size": "40", "volume_id": {get_resource: sys-vol_server1}, "delete_on_termination": True, "device_name": "/dev/vda"}]
      name: "ironio_cp1"
      admin_user: "k5user"
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
              - content: |
                  #!/bin/bash
                  voldata_id=%voldata_id%
                  voldata_dev="/dev/disk/by-id/virtio-$(echo ${voldata_id} | cut -c -20)"
                  mkfs.ext4 ${voldata_dev}
                  mkdir -pv /mnt/appdata
                  echo "${voldata_dev} /mnt/appdata ext4 defaults 1 2" >> /etc/fstab
                  mount /mnt/appdata
                  chmod 0777 /mnt/appdata; apt-get update; apt-get install -y docker.io
                path: /tmp/format-disks
                permissions: '0700'
            runcmd:
              - /tmp/format-disks
          params:
            "%voldata_id%": { get_resource: data_vol_server1 }
      user_data_format: RAW
      networks:
        - port: { get_resource: server1_port }

  # Attach previously defined data-vol to the server
  attach_vol1:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ data_vol_server1, server1 ]
    properties:
      instance_uuid: {get_resource: server1}
      mountpoint: "/dev/vdb"
      volume_id: {get_resource: data_vol_server1}

  ################################ Adding a Server End ################################

 ################################ Adding a Server Start ##############################

  # Create a new port for the server interface, assign an ip address and security group    
  server2_port:
    type: OS::Neutron::Port
    depends_on: [ ironio_router,server_security_group1 ]
    properties:
      availability_zone: { get_param: az }
      network_id: { get_resource: ironio_net }
      security_groups: [{ get_resource: server_security_group1 }]
      fixed_ips:
        - subnet_id: { get_resource: ironio_subnet }
          ip_address: '10.10.203.2'

  # Create a data volume for use with the server
  data_vol_server2:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      description: Data volume
      name: "data-vol"
      size: 140
      volume_type: "M1"

  # Create a system volume for use with the server
  sys-vol_server2:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      name: "boot-vol"
      size: 40
      volume_type: "M1"
      image : { get_param: ubuntu1604 }

  # Build a server using the system volume defined above
  server2:
    type: OS::Nova::Server
    depends_on: [ server1,server2_port ]
    properties:
      key_name: { get_param: default-sshkey }
      image: { get_param: ubuntu1604 }
      flavor: "S-1"
      block_device_mapping: [{"volume_size": "40", "volume_id": {get_resource: sys-vol_server2}, "delete_on_termination": True, "device_name": "/dev/vda"}]
      name: "ironio_cp2"
      admin_user: "k5user"
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
              - content: |
                  #!/bin/bash
                  voldata_id=%voldata_id%
                  voldata_dev="/dev/disk/by-id/virtio-$(echo ${voldata_id} | cut -c -20)"
                  mkfs.ext4 ${voldata_dev}
                  mkdir -pv /mnt/appdata
                  echo "${voldata_dev} /mnt/appdata ext4 defaults 1 2" >> /etc/fstab
                  mount /mnt/appdata
                  chmod 0777 /mnt/appdata; apt-get update; apt-get install -y docker.io
                path: /tmp/format-disks
                permissions: '0700'
            runcmd:
              - /tmp/format-disks
          params:
            "%voldata_id%": { get_resource: data_vol_server2 }
      user_data_format: RAW
      networks:
        - port: { get_resource: server2_port }

  # Attach previously defined data-vol to the server
  attach_vol2:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ data_vol_server2, server2 ]
    properties:
      instance_uuid: {get_resource: server2}
      mountpoint: "/dev/vdb"
      volume_id: {get_resource: data_vol_server2}

  ################################ Adding a Server End ################################

    ################################ Adding a Server Start ##############################

  # Create a new port for the server interface, assign an ip address and security group    
  server3_port:
    type: OS::Neutron::Port
    depends_on: [ ironio_router,server_security_group1 ]
    properties:
      availability_zone: { get_param: az }
      network_id: { get_resource: ironio_net }
      security_groups: [{ get_resource: server_security_group1 }]
      fixed_ips:
        - subnet_id: { get_resource: ironio_subnet }
          ip_address: '10.10.203.3'

  # Create a data volume for use with the server
  data_vol_server3:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      description: Data volume
      name: "data-vol"
      size: 140
      volume_type: "M1"

  # Create a system volume for use with the server
  sys-vol_server3:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      name: "boot-vol"
      size: 40
      volume_type: "M1"
      image : { get_param: ubuntu1604 }

  # Build a server using the system volume defined above
  server3:
    type: OS::Nova::Server
    depends_on: [ server2,server3_port ]
    properties:
      key_name: { get_param: default-sshkey }
      image: { get_param: ubuntu1604 }
      flavor: "S-1"
      block_device_mapping: [{"volume_size": "40", "volume_id": {get_resource: sys-vol_server3}, "delete_on_termination": True, "device_name": "/dev/vda"}]
      name: "ironio_cp3"
      admin_user: "k5user"
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
              - content: |
                  #!/bin/bash
                  voldata_id=%voldata_id%
                  voldata_dev="/dev/disk/by-id/virtio-$(echo ${voldata_id} | cut -c -20)"
                  mkfs.ext4 ${voldata_dev}
                  mkdir -pv /mnt/appdata
                  echo "${voldata_dev} /mnt/appdata ext4 defaults 1 2" >> /etc/fstab
                  mount /mnt/appdata
                  chmod 0777 /mnt/appdata; apt-get update; apt-get install -y docker.io
                path: /tmp/format-disks
                permissions: '0700'
            runcmd:
              - /tmp/format-disks
          params:
            "%voldata_id%": { get_resource: data_vol_server3 }
      user_data_format: RAW
      networks:
        - port: { get_resource: server3_port }

  # Attach previously defined data-vol to the server
  attach_vol3:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ data_vol_server3, server3 ]
    properties:
      instance_uuid: {get_resource: server3}
      mountpoint: "/dev/vdb"
      volume_id: {get_resource: data_vol_server3}

  ################################ Adding a Server End ################################

    ################################ Adding a Server Start ##############################

  # Create a new port for the server interface, assign an ip address and security group    
  server4_port:
    type: OS::Neutron::Port
    depends_on: [ ironio_router,server_security_group1 ]
    properties:
      availability_zone: { get_param: az }
      network_id: { get_resource: ironio_net }
      security_groups: [{ get_resource: server_security_group1 }]
      fixed_ips:
        - subnet_id: { get_resource: ironio_subnet }
          ip_address: '10.10.203.4'

  # Create a data volume for use with the server
  data_vol_server4:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      description: Data volume
      name: "data-vol"
      size: 140
      volume_type: "M1"

  # Create a system volume for use with the server
  sys-vol_server4:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      name: "boot-vol"
      size: 40
      volume_type: "M1"
      image : { get_param: ubuntu1604 }

  # Build a server using the system volume defined above
  server4:
    type: OS::Nova::Server
    depends_on: [ server3,server4_port ]
    properties:
      key_name: { get_param: default-sshkey }
      image: { get_param: ubuntu1604 }
      flavor: "S-1"
      block_device_mapping: [{"volume_size": "40", "volume_id": {get_resource: sys-vol_server4}, "delete_on_termination": True, "device_name": "/dev/vda"}]
      name: "ironio_cp4"
      admin_user: "k5user"
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
              - content: |
                  #!/bin/bash
                  voldata_id=%voldata_id%
                  voldata_dev="/dev/disk/by-id/virtio-$(echo ${voldata_id} | cut -c -20)"
                  mkfs.ext4 ${voldata_dev}
                  mkdir -pv /mnt/appdata
                  echo "${voldata_dev} /mnt/appdata ext4 defaults 1 2" >> /etc/fstab
                  mount /mnt/appdata
                  chmod 0777 /mnt/appdata; apt-get update; apt-get install -y docker.io
                path: /tmp/format-disks
                permissions: '0700'
            runcmd:
              - /tmp/format-disks
          params:
            "%voldata_id%": { get_resource: data_vol_server4 }
      user_data_format: RAW
      networks:
        - port: { get_resource: server4_port }

  # Attach previously defined data-vol to the server
  attach_vol4:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ data_vol_server4, server4 ]
    properties:
      instance_uuid: {get_resource: server4}
      mountpoint: "/dev/vdb"
      volume_id: {get_resource: data_vol_server4}

  ################################ Adding a Server End ################################

    ################################ Adding a Server Start ##############################

  # Create a new port for the server interface, assign an ip address and security group    
  server5_port:
    type: OS::Neutron::Port
    depends_on: [ ironio_router,server_security_group1 ]
    properties:
      availability_zone: { get_param: az }
      network_id: { get_resource: ironio_net }
      security_groups: [{ get_resource: server_security_group1 }]
      fixed_ips:
        - subnet_id: { get_resource: ironio_subnet }
          ip_address: '10.10.203.5'

  # Create a data volume for use with the server
  data_vol_server5:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      description: Data volume
      name: "data-vol"
      size: 140
      volume_type: "M1"

  # Create a system volume for use with the server
  sys-vol_server5:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      name: "boot-vol"
      size: 40
      volume_type: "M1"
      image : { get_param: ubuntu1604 }

  # Build a server using the system volume defined above
  server5:
    type: OS::Nova::Server
    depends_on: [ server4,server5_port ]
    properties:
      key_name: { get_param: default-sshkey }
      image: { get_param: ubuntu1604 }
      flavor: "S-1"
      block_device_mapping: [{"volume_size": "40", "volume_id": {get_resource: sys-vol_server5}, "delete_on_termination": True, "device_name": "/dev/vda"}]
      name: "ironio_cp5"
      admin_user: "k5user"
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
              - content: |
                  #!/bin/bash
                  voldata_id=%voldata_id%
                  voldata_dev="/dev/disk/by-id/virtio-$(echo ${voldata_id} | cut -c -20)"
                  mkfs.ext4 ${voldata_dev}
                  mkdir -pv /mnt/appdata
                  echo "${voldata_dev} /mnt/appdata ext4 defaults 1 2" >> /etc/fstab
                  mount /mnt/appdata
                  chmod 0777 /mnt/appdata; apt-get update; apt-get install -y docker.io
                path: /tmp/format-disks
                permissions: '0700'
            runcmd:
              - /tmp/format-disks
          params:
            "%voldata_id%": { get_resource: data_vol_server5 }
      user_data_format: RAW
      networks:
        - port: { get_resource: server5_port }

  # Attach previously defined data-vol to the server
  attach_vol5:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ data_vol_server5, server5 ]
    properties:
      instance_uuid: {get_resource: server5}
      mountpoint: "/dev/vdb"
      volume_id: {get_resource: data_vol_server5}

  ################################ Adding a Server End ################################

 